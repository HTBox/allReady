<!-- TODO 2231 Which of the follow four are necessary? -->
@using AllReady.Constants
@using AllReady.Security;
@using AllReady.ViewModels.Manage
@inject AllReady.Services.ISelectListService SelectListService

@model IndexViewModel

@{
    ViewData["Title"] = "Manage your account";
}

<h2>@ViewData["Title"]</h2>
<p class="text-success">@ViewData["StatusMessage"]</p>
<div>

    @if (!Model.ProfileViewModel.IsProfileComplete)
    {
        <div class="alert alert-info" role="alert">
            <p class="text-info">
                <i class="fa fa-exclamation-circle"></i> Please complete your allReady account profile
                <br />
                <ul>
                    @foreach(var warning in Model.ProfileViewModel.ProfileCompletenessWarnings)
                    {
                        <li>@warning</li>
                    }
                </ul>
            </p>            
        </div>
    }

    <ul class="nav nav-tabs">
        <li class="active"><a data-toggle="tab" href="#account-tab">Account</a></li>
        <li><a data-toggle="tab" href="#skills-tab">Skills</a></li>
    </ul>

    <div class="tab-content">
        <div id="account-tab" class="tab-pane fade in active">

            @Html.Partial("_ManageProfile", Model.ProfileViewModel)

        </div>

        <div id="skills-tab" class="tab-pane">

            @Html.Partial("_ManageSkills", Model.SkillsViewModel)

        </div>
    </div>
</div>

@section scripts {

    <script type="text/javascript">
        (function (ko, $, skills, availableSkills) {

            function ManageUserViewModel(skills, availableSkills) {

                function SkillObservable(skillModel) {
                    var ret = ko.utils.extend({}, skillModel);
                    ret.Id = ko.observable(ret.Id);
                    ret.ControlName = function (index) {
                        return 'AssociatedSkills[' + ko.unwrap(index) + '].SkillId';
                    };
                    ret.Description = ko.computed(function () {
                        var skill = availableSkills.filter(function (skill) { return skill.Id === ret.Id(); })[0];
                        return (skill && skill.Description) || "";
                    });
                    return ret;
                }
                skills = (skills || []).map(SkillObservable);

                var self = this;
                this.skills = ko.observableArray(skills).uniqueValidator("Id");
                this.availableSkills = ko.observableArray(availableSkills);
                this.addSkill = function() {
                    self.skills.push(SkillObservable());
                };
                this.deleteSkill = function(skill) {
                    self.skills.remove(skill);
                };
            }

            ko.applyBindings(new ManageUserViewModel(skills, availableSkills));
        })(
            ko, 
            $,
            // TODO 2231 Figure out how to run this script from the _ManageSkills partial View.
            @Json.Serialize(Model.SkillsViewModel.AssociatedSkills.Select(rs => new { Id = rs.SkillId })),
            @Json.Serialize(SelectListService.GetSkills()));

    </script>
}