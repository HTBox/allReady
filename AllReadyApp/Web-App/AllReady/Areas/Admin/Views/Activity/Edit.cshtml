@model AllReady.Areas.Admin.ViewModels.ActivityCreateEditPostParentViewModel

<h4>@Model.CampaignName</h4>
<h2>@Model.PageTitle</h2>

@using (Html.BeginForm((Model.IsCreateView ? "Create" : "Edit"), "Activity"))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div asp-validation-summary="ValidationSummary.ModelOnly" class="text-danger"></div>
        <div class="form-group">
            <label asp-for="CreateEditViewModel.Name" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <input asp-for="CreateEditViewModel.Name" class="form-control" />
                <span asp-validation-for="CreateEditViewModel.Name" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="CreateEditViewModel.Description" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <textarea asp-for="CreateEditViewModel.Description" class="form-control"></textarea>
                <span asp-validation-for="CreateEditViewModel.Description" class="text-danger"></span>
            </div>
        </div>

        <div class="form-group">
            <label asp-for="CreateEditViewModel.StartDateTime" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <input asp-for="CreateEditViewModel.StartDateTime" class="form-control datepicker" />
                <span asp-validation-for="CreateEditViewModel.StartDateTime" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="CreateEditViewModel.EndDateTime" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <input asp-for="CreateEditViewModel.EndDateTime" class="form-control datepicker" />
                <span asp-validation-for="CreateEditViewModel.EndDateTime" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="CreateEditViewModel.RequiredSkills" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <div data-bind="foreach: requiredSkills">
                    <div class="form-inline">
                        <select class="form-control" data-bind="attr: { name: 'CreateEditViewModel.RequiredSkills[' + $index() + '].SkillId' }, options: $root.availableSkills, optionsText: 'Name', optionsValue: 'Id', value: Id"></select>
                        <a href="#" data-bind="click: $root.deleteSkill" title="Delete required skill">
                            <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                            Delete
                        </a>
                    </div>
                </div>
                <a href="#" data-bind="click: addSkill" title="Add required skill">
                    <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
                    Add
                </a>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="submit" class="btn" data-bind="enable: requiredSkills.isValid">Save</button>
                <span class="label label-danger" data-bind="visible: !requiredSkills.isValid()">Required skills must be unique</span>
            </div>
        </div>
    </div>
}

@if (!Model.IsCreateView)
{
    <h2>Image for @Model.ActivityName</h2>
    <div class="form-horizontal">
        <div class="form-group">
            @Html.LabelFor(model => model.UploadFileViewModel.ImageUrl, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <img src="@Model.UploadFileViewModel.ImageUrl" class="img-thumbnail img-responsive col-md-4" />
                <br /><br />
                @using (@Html.BeginForm("PostActivityFile", "Activity", new { Area = "Admin", Id = Model.ActivityId }, FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()

                    <input asp-for="UploadFileViewModel.ImageUrl" type="hidden" />

                    <div class="form-group">
                        <div class="col-md-10">
                            <input asp-for="UploadFileViewModel.UploadedFile" type="file" />
                            <br />
                            <span asp-validation-for="UploadFileViewModel.UploadedFile" class="text-danger"></span>

                            <button type="submit" class="btn col-md-1">Upload</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

}

<div>
    <a class="btn" asp-controller="Activity" asp-action="Index" asp-route-campaignId="@Model.CampaignId">Back to List</a>
</div>

@section scripts {
    <script type="text/javascript" src="~/js/ko.validation.js"></script>
    <script type="text/javascript">
        (function (ko, $, requiredSkills, availableSkills) {

            function AdminActivityViewModel(requiredSkills, availableSkills) {

                function RequiredSkillObservable(skillModel) {
                    var ret = ko.utils.extend({}, skillModel);
                    ret.Id = ko.observable(ret.Id);
                    return ret;
                }
                requiredSkills = (requiredSkills || []).map(RequiredSkillObservable);

                var self = this;
                this.requiredSkills = ko.observableArray(requiredSkills).uniqueValidator("Id");
                this.availableSkills = ko.observableArray(availableSkills);
                this.addSkill = function() {
                    self.requiredSkills.push(RequiredSkillObservable());
                };
                this.deleteSkill = function(skill) {
                    self.requiredSkills.remove(skill);
                };
            }

            ko.applyBindings(new AdminActivityViewModel(requiredSkills, availableSkills));
        })(ko, $,
            @Json.Serialize(Model.CreateEditViewModel.RequiredSkills.Select(rs => new { Id = rs.SkillId })),
            @Json.Serialize(ViewData["Skills"]));
    </script>
}

