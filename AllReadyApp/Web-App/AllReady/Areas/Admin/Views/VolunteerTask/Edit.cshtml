@using AllReady.Constants
@using AllReady.Constants
@using AllReady.Services
@model AllReady.Areas.Admin.ViewModels.VolunteerTask.EditViewModel
@inject ISelectListService SelectListService

<div class="row">
    <div class="col-12">
        <ol class="breadcrumb">
            <li><a asp-controller="Campaign" asp-action="Index" asp-route-area="@AreaNames.Admin">Campaigns</a></li>
            <li><a asp-controller="Campaign" asp-action="Details" asp-route-id="@Model.CampaignId" asp-route-area="@AreaNames.Admin">@Model.CampaignName</a></li>
            <li><a asp-controller="Event" asp-action="Details" asp-route-id="@Model.EventId" asp-route-area="@AreaNames.Admin">@Model.EventName</a></li>
            @if (Model.Id == 0)
            {
                <li>Create New Task</li>
            }
            else
            {
                <li><a asp-controller="VolunteerTask" asp-action="Details" asp-route-id="@Model.Id" asp-area="@AreaNames.Admin">@Model.Name</a></li>
                <li>Edit</li>
            }
        </ol>
    </div>
</div>
<h2>@ViewBag.Title</h2>

<form asp-controller="VolunteerTask" asp-action="Edit" enctype="multipart/form-data">
    <div class="form-horizontal">
        <p>Fields marked with * are required</p>
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <input type="hidden" asp-for="EventId" />
        <input type="hidden" asp-for="CampaignId" />
        <input type="hidden" asp-for="EventName" />
        <input type="hidden" asp-for="EventStartDate" />
        <input type="hidden" asp-for="EventEndDate" />
        <input type="hidden" asp-for="CampaignName" />
        <input type="hidden" asp-for="TimeZoneId" />
        <input type="hidden" asp-for="OrganizationId" />

        <div class="form-group">
            <label asp-for="CampaignName" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <p class="form-control-static">@Model.CampaignName</p>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="EventName" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <p class="form-control-static">@Model.EventName</p>
            </div>
        </div>       
        <div class="form-group">
            <label asp-for="Name" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="Description" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <textarea asp-for="Description" class="form-control"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="NumberOfVolunteersRequired" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <input asp-for="NumberOfVolunteersRequired" class="form-control" min="1">
                <span asp-validation-for="NumberOfVolunteersRequired" class="text-danger"></span>
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Event Start/End dates</label>
            <div class="col-md-10">
                <p class="form-control-static">
                    <time value="Model.EventStartDate" TargetTimeZoneId="Model.TimeZoneId"></time> - <time value="Model.EventEndDate" TargetTimeZoneId="Model.TimeZoneId"></time>
                </p>
            </div>
        </div>

        <div class="form-group">
            <label asp-for="StartDateTime" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <input type="text" asp-for="StartDateTime" class="form-control datetimepicker" autocomplete="off" />
                <time-zone-name time-zone-id="@Model.TimeZoneId" class="text-muted"></time-zone-name>
                <span asp-validation-for="StartDateTime" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="EndDateTime" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <input type="text" asp-for="EndDateTime" class="form-control datetimepicker" autocomplete="off" />
                <time-zone-name time-zone-id="@Model.TimeZoneId" class="text-muted"></time-zone-name>
                <span asp-validation-for="EndDateTime" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="RequiredSkills" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <div data-bind="foreach: requiredSkills">
                    <div class="form-inline">
                        <select class="form-control" data-bind="attr: { name: ControlName($index) }, options: $root.availableSkills, optionsText: 'Name', optionsValue: 'Id', value: Id"></select>
                        <span class="fa fa-question-circle" data-bind="visible: Description, tooltip: { title: Description, placement: 'top' }" aria-hidden="true"></span>
                        <a href="#" data-bind="click: $root.deleteSkill" title="Delete required skill">
                            <span class="fa fa-remove" aria-hidden="true"></span>
                            Delete
                        </a>
                    </div>
                </div>
                <a href="#" data-bind="click: addSkill" title="Add required skill">
                    <span class="fa fa-plus" aria-hidden="true"></span>
                    Add
                </a>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="NewAttachment" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <input asp-for="NewAttachment" class="form-control" type="file">
                <span asp-validation-for="NewAttachment" class="text-danger"></span>
            </div>

            <label asp-for="NewAttachmentDescription" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <input asp-for="NewAttachmentDescription" class="form-control">
                <span asp-validation-for="NewAttachmentDescription" class="text-danger"></span>
            </div>
        </div>

        <div class="form-group" data-bind="visible: attachments().length">
            <label asp-for="DeleteAttachments" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <div data-bind="foreach: attachments">
                    <div class="form-inline">
                        <input type="checkbox" name="DeleteAttachments" data-bind="attr: { value: $data.Id }" />
                        <a data-bind="attr: { href: Url }, tooltip: { title: Description, placement: 'top' }" href="" target="_blank">
                            <span data-bind="text: Name"> </span>
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="submit" class="btn btn-default" data-bind="enable: requiredSkills.isValid">Save</button>
                <a class="btn btn-default" href="@Model.CancelUrl">Cancel</a>
                <span class="label label-danger" data-bind="visible: !requiredSkills.isValid()">"@Html.DisplayNameFor(m => m.RequiredSkills)" must be unique</span>
            </div>
        </div>
    </div>
</form>

@section scripts {
    <script type="text/javascript">
        (function (ko, $, requiredSkills, availableSkills, attachments) {

            function AdminTaskViewModel(requiredSkills, availableSkills, attachments) {

                function RequiredSkillObservable(skillModel) {
                    var ret = ko.utils.extend({}, skillModel);
                    ret.Id = ko.observable(ret.Id);
                    ret.ControlName = function (index) {
                        return 'RequiredSkills[' + ko.unwrap(index) + '].SkillId';
                    };
                    ret.Description = ko.computed(function () {
                        var skill = availableSkills.filter(function (skill) { return skill.Id === ret.Id(); })[0];
                        return (skill && skill.Description) || "";
                    });
                    return ret;
                }
                requiredSkills = (requiredSkills || []).map(RequiredSkillObservable);

                var self = this;
                this.requiredSkills = ko.observableArray(requiredSkills).uniqueValidator("Id");
                this.availableSkills = ko.observableArray(availableSkills);
                this.attachments = ko.observableArray(attachments);
                this.addSkill = function() {
                    self.requiredSkills.push(RequiredSkillObservable());
                };
                this.deleteSkill = function(skill) {
                    self.requiredSkills.remove(skill);
                };
            }

            ko.applyBindings(new AdminTaskViewModel(requiredSkills, availableSkills, attachments));
        })(ko, $,
            @Json.Serialize(Model.RequiredSkills.Select(rs => new { Id = rs.SkillId })),
            @Json.Serialize(SelectListService.GetSkills()),
            @Json.Serialize(Model.Attachments));
    </script>
}
